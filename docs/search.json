[{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/dataformat.html","id":"tree","dir":"Articles","previous_headings":"","what":"Tree","title":"Input formats","text":"tree must rooted tree ape::phylo format. general, ape::read.nexus excellent job parsing valid Newick strings features can used tensoRphylo without additional processing. Trees may combination extant /extinct tips, well sampled ancestors. (ape::phylo, sampled ancestors represented nodes single descendant.) tree may stem branch subtending root, case tensoRphylo assume process begins one lineage start stem branch. Otherwise, tensoRphylo assume process begin two lineages root tree. length stem branch stored root.edge element ape::phylo object.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/dataformat.html","id":"a-closer-look-at-a-tree-with-extinct-tips-and-sampled-ancestors","dir":"Articles","previous_headings":"Tree","what":"A closer look at a tree with extinct tips and sampled ancestors","title":"Input formats","text":"sampled-ancestor tree (extant /extinct samples samples along branches) complex type tree produced general modeling framework implemented tensoRphylo; trees (e.g., trees extant taxa ) special case tree. can find nexus file valid Newick representation sampled-ancestor tree package data (link raw file): Notice tree internal nodes tips, nodes (sampled ancestors) one descendant. Inspecting node labels, see nodes labeled \"\" others labeled strings: nodes strings sampled ancestors; node labels used associate sampled ancestor character data (discussed next section). tree also stem: can plot tree see sampled ancestors. tree extant extinct tips, well sampled ancestors (dots along branches).","code":"# path to tree file tree_file <- system.file(\"testdata\", \"sampled_ancestor_tree.nex\",                            package = \"tensoRphylo\")  # read the tree tree <- ape::read.nexus(tree_file)  # print the tree tree ##  ## Phylogenetic tree with 14 tips and 18 internal nodes. ##  ## Tip labels: ##   t_70, t_71, t_17, t_72, t_73, t_66, ... ## Node labels: ##   , , , t_8, , t_16, ... ##  ## Rooted; includes branch lengths. # print node labels tree$node.label ##  [1] \"\"     \"\"     \"\"     \"t_8\"  \"\"     \"t_16\" \"\"     \"\"     \"t_14\" \"\"     ## [11] \"\"     \"\"     \"\"     \"\"     \"\"     \"t_53\" \"\"     \"t_81\" # print the root edge tree$root.edge ## [1] 3.78442 # plot the tree with a root edge ape::plot.phylo(tree, no.margin = TRUE, root.edge = TRUE, underscore = TRUE)  # plot the sampled ancestors with names sampled_ancestors <- (1:tree$Nnode + Ntip(tree))[tree$node.label != \"\"] ape::nodelabels(node = sampled_ancestors, text = tree$node.label[tree$node.label != \"\"], adj = c(0, -1), frame = \"none\", srt = 35) ape::nodelabels(node = sampled_ancestors, pch  = 19)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/dataformat.html","id":"character-data","dir":"Articles","previous_headings":"","what":"Character data","title":"Input formats","text":"discrete character data can either “traditional” format, .e., named vector specifying state sample, numeric matrix rows corresponding samples columns correspond states. briefly describe formats .","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/dataformat.html","id":"named-vector","dir":"Articles","previous_headings":"Character data","what":"Named vector","title":"Input formats","text":"format familiar people used ape, phytools, diversitree, etc. format, data represented vector numeric, integer, string variables, element named corresponding sample tree. often convenient, main drawback format tensoRphylo must figure state space model data. consequence, tensoRphylo include states present data. inappropriate know states present sample; example, state number chromosomes, logically state space include integers, even every number chromosomes observed data. provide example dataset format package data: tensoRphylo added functionality provided named vector strings. First, accommodates missing data, represented ? -. Second, accommodates ambiguous data, .e., sample one many possible (perhaps hidden) states. Ambiguous data represented /-delimited string possible states, see . can use internal function tensoRphylo:::.char.vector..table see tensoRphylo translates type data numeric matrix format, described next: Note top three rows (corresponding samples set ambiguous/missing data) now 1, states possible.","code":"# path to character data file data_file <- system.file(\"testdata\", \"sampled_ancestor_data_vec.Rda\",                            package = \"tensoRphylo\")  # read the character data data <- readRDS(data_file)  data ##  t_70  t_71  t_17  t_72  t_73  t_16   t_8  t_66  t_78  t_14  t_57  t_62  t_51  ## \"0/1\"   \"1\"   \"1\"   \"1\"   \"1\"   \"1\"   \"1\"   \"1\"   \"0\"   \"1\"   \"1\"   \"0\"   \"1\"  ##  t_84  t_58  t_53  t_82  t_81  t_80  ##   \"1\"   \"1\"   \"1\"   \"1\"   \"1\"   \"1\" # make some missing data data[2] <- \"?\" data[3] <- \"-\"  # convert to numeric matrix and print the result tensoRphylo:::.char.vector.to.table(data) ##      0 1 ## t_70 1 1 ## t_71 1 1 ## t_17 1 1 ## t_72 0 1 ## t_73 0 1 ## t_16 0 1 ## t_8  0 1 ## t_66 0 1 ## t_78 1 0 ## t_14 0 1 ## t_57 0 1 ## t_62 1 0 ## t_51 0 1 ## t_84 0 1 ## t_58 0 1 ## t_53 0 1 ## t_82 0 1 ## t_81 0 1 ## t_80 0 1"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/dataformat.html","id":"numeric-matrix","dir":"Articles","previous_headings":"Character data","what":"Numeric matrix","title":"Input formats","text":"case, data represented numeric matrix one row per sample one column per state. rows must named according corresponding sample tree; likewise, columns must named according discrete state. value ,jth element 1 ith sample state j, 0 otherwise. provide example dataset format package data:","code":"# path to character data file data_file <- system.file(\"testdata\", \"sampled_ancestor_data.Rda\",                            package = \"tensoRphylo\")  # read the character data data <- readRDS(data_file)  data ##      0 1 ## t_70 1 1 ## t_71 0 1 ## t_17 0 1 ## t_72 0 1 ## t_73 0 1 ## t_16 0 1 ## t_8  0 1 ## t_66 0 1 ## t_78 1 0 ## t_14 0 1 ## t_57 0 1 ## t_62 1 0 ## t_51 0 1 ## t_84 0 1 ## t_58 0 1 ## t_53 0 1 ## t_82 0 1 ## t_81 0 1 ## t_80 0 1"},{"path":[]},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/dataformat.html","id":"nexus-format","dir":"Articles","previous_headings":"Character data > Reading character data","what":"NEXUS format","title":"Input formats","text":"tensoRphylo provides basic functionality reading character data desired format. function tensoRphylo::readNexusData reads NEXUS file single discrete character (nchar = 1). function correctly interprets missing ambiguous data, determines number states state labels NEXUS file. read sampled ancestor data saw (link raw file):","code":"# path to character data file data_file <- system.file(\"testdata\", \"sampled_ancestor_data.nex\",                            package = \"tensoRphylo\")  # read the character data data <- readNexusData(data_file)  data ##      0 1 ## t_70 1 1 ## t_71 0 1 ## t_17 0 1 ## t_72 0 1 ## t_73 0 1 ## t_16 0 1 ## t_8  0 1 ## t_66 0 1 ## t_78 1 0 ## t_14 0 1 ## t_57 0 1 ## t_62 1 0 ## t_51 0 1 ## t_84 0 1 ## t_58 0 1 ## t_53 0 1 ## t_82 0 1 ## t_81 0 1 ## t_80 0 1"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/dataformat.html","id":"delimited-text-format","dir":"Articles","previous_headings":"Character data > Reading character data","what":"Delimited text format","title":"Input formats","text":"function tensoRphylo::readDelimitedData reads comma- tab-delimited file one row per sample, first column containing sample name, second column containing character data. columns headers. character data can including missing data (? -) ambiguous data (/-delimited string compatible states). states encoded numeric values starting 0. format natively contain information state space, must provide number states reader. , read sampled ancestor data saw (link raw file).","code":"# path to character data file data_file <- system.file(\"testdata\", \"sampled_ancestor_data.csv\",                            package = \"tensoRphylo\")  # read the character data data <- readDelimitedData(data_file, delim = \",\", nstates = 2)  data ##      0 1 ## t_70 1 1 ## t_71 0 1 ## t_17 0 1 ## t_72 0 1 ## t_73 0 1 ## t_16 0 1 ## t_8  0 1 ## t_66 0 1 ## t_78 1 0 ## t_14 0 1 ## t_57 0 1 ## t_62 1 0 ## t_51 0 1 ## t_84 0 1 ## t_58 0 1 ## t_53 0 1 ## t_82 0 1 ## t_81 0 1 ## t_80 0 1"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/dataformat.html","id":"conformity","dir":"Articles","previous_headings":"Character data","what":"Conformity","title":"Input formats","text":"tensoRphylo basic checks make sure tree data samples. provide data object samples occur tree, tensoRphylo simply ignore samples. Likewise, provide tree samples occur data, tensoRphylo simply add missing data samples provided dataset.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/example.html","id":"reading-data","dir":"Articles","previous_headings":"","what":"Reading data","title":"An example","text":"start loading tensoRphylo cetacean phylogeny (available ). cetacean phylogeny Steeman et al. 2009.","code":"library(tensoRphylo)  # read the whale tree tree <- read.tree(\"whales_Steemanetal2009.tre\")  # plot the tree plot(tree)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/example.html","id":"specifying-the-model","dir":"Articles","previous_headings":"","what":"Specifying the model","title":"An example","text":"First create tensoRphylo::TensorPhyloInstance. ’ll assume speciation extinction rates evolve according separate Markov processes.","code":""},{"path":[]},{"path":[]},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/performance.html","id":"a-multistate-model","dir":"Articles","previous_headings":"","what":"A multistate model","title":"Performance","text":"Performance tensoRphylo (orange) diversitree (blue) castor (green) function tree size number states.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/performance.html","id":"a-multistate-model-with-cladogenesis","dir":"Articles","previous_headings":"","what":"A multistate model with cladogenesis","title":"Performance","text":"Performance tensoRphylo (orange) diversitree (blue) function tree size number states. (Note diversitree allows 31 states.)","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"reading-in-data","dir":"Articles","previous_headings":"","what":"Reading in data","title":"Using tensoRphylo","text":"start using tensoRphylo, need tree discrete character data. information file formats, see Input Formats page. read simple tree ape::phylo format provided inst/testdata. Now read discrete-character data.","code":"# path to tree file tree_file <- system.file(\"testdata\", \"extant_tree.nex\",                           package = \"tensoRphylo\")  # read the tree tree <- ape::read.nexus(tree_file) # path to data file data_file <- system.file(\"testdata\", \"extant_data.nex\",                           package = \"tensoRphylo\")  # read the data data <- readNexusData(data_file)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"creating-a-tensorphylo-instance","dir":"Articles","previous_headings":"","what":"Creating a tensoRphylo instance","title":"Using tensoRphylo","text":"Now ’s time make tensoRphylo::TensorPhyloInstance. R object mediates interactions R TensorPhylo backend library. make new instance, provide tree character data. (makeTensorPhylo automatic checks make sure tree data appropriately formatted. See Data Formats: Conformity details.) can also skip data argument instead just provide num_states argument. create “blank” data matrix num_states states (basically hidden-character model num_states hidden states). instance begins state-independent constant-rate Yule model (\\(\\lambda = 1\\), \\(\\mu = 0\\), \\(\\rho = 1\\)) tree, constant-rate Mk model character data (transition rate \\(\\eta = 0.1\\)). can already use instance compute likelihood model. course, generally using default model, let alone default parameters! ’ll see specify models parameters next.","code":"# make a default tensorphylo instance tp <- makeTensorPhylo(tree, data) # make a default tensorphylo instance tp <- makeTensorPhylo(tree, num_states = 2) tp$computeLogLikelihood() ## [1] -55.60754"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"specifying-models-and-parameters","dir":"Articles","previous_headings":"","what":"Specifying models and parameters","title":"Using tensoRphylo","text":"model component (e.g., speciation rates, extinction rates, transition rates, etc.) can modified specific models parameter values. general, processes may vary among character states /time, ’ll begin simple, constant-rate models.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"constant-rate-birth-death-models","dir":"Articles","previous_headings":"Specifying models and parameters","what":"Constant-rate birth-death models","title":"Using tensoRphylo","text":"constant-rate birth-death model assumes species arise rate \\(\\lambda\\), go extinct rate \\(\\mu\\), sampled present probability \\(\\rho\\). compute likelihood tree model, ’ll create TensorPhyloInstance without character data (minimum number missing states): can now set desired parameter values like : , “constant” indicates rates time among states; setRhoPresent specifies sampling fraction present (since models may include sampling multiple time points). (character data missing diversification rates vary among discrete states, effectively constant-rate birth-death model.) compute likelihood new parameter value (set parameter values), don’t recreate instance. Instead, just set parameters recompute likelihood:","code":"# our initial instance tp <- makeTensorPhylo(tree, num_states = 2) # set some parameter values tp$setLambdaConstant(1.2) tp$setMuConstant(0.5) tp$setRhoPresent(0.5)  # compute the likelihood tp$computeLogLikelihood() ## [1] -46.95763 # set different parameter values tp$setLambdaConstant(0.9) tp$setMuConstant(0.23)  # compute the likelihood tp$computeLogLikelihood() ## [1] -44.60947"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"constant-rate-birth-death-models-with-character-data","dir":"Articles","previous_headings":"Specifying models and parameters","what":"Constant-rate birth-death models with character data","title":"Using tensoRphylo","text":"Now ’ll see model discrete character evolution. begin recreating TensorPhyloInstance binary character data loaded previously. ’ll use simple constant-rate birth-death model, now ’ll model evolution discrete character well. , ’ll set basic birth-death model parameters. ’ll also specify simple model character evolution assuming transitions states occur rate. case, model just one parameter, \\(\\eta\\). , “constant” indicates rates time, “equal” indicates rates equal among character states. likelihood now joint probability tree character data, given specified parameters: Alternatively, allow rates change different among character states. specify type model first creating tensoRphylo::RateMatrix object, describes instantaneous rate change state (row) state j (column). Note rows matrix sum zero; diagonal elements automatically computed set -diagonal rates. can provide rate matrix TensorPhyloInstance , setEtaConstantUnequal refers fact rates change unequal among character states.","code":"# make the tensorphylo instance with character data tp <- makeTensorPhylo(tree, data) # set diversification parameters tp$setLambdaConstant(0.5) tp$setMuConstant(0.1) tp$setRhoPresent(0.5) # set transition parameters tp$setEtaConstantEqual(0.2) # compute the likelihood tp$computeLogLikelihood() ## [1] -48.85893 # create an empty rate matrix with the appropriate number of states H <- makeRateMatrix(num_states = 2)  # specify the rate from state 1 to state 2 H[1,2] <- 0.1 H[2,1] <- 0.2  # print the matrix H ## A rate matrix with 2 states. <0x600003b5f260> ##     [-0.100, 0.100] ##     [0.200, -0.200] # set the rate matrix tp$setEtaConstantUnequal(H)  # compute the likelihood tp$computeLogLikelihood() ## [1] -50.212"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"state-dependent-models","dir":"Articles","previous_headings":"Specifying models and parameters","what":"State-dependent models","title":"Using tensoRphylo","text":"Now, want specify complex model: one allows diversification rates vary among states. Let’s imagine want allow speciation rate, \\(\\lambda\\), vary among two binary states. can specify model creating vector speciation rates (one per state): , setLambdaStateDependent means speciation rates depend character states. Note create new TensorPhyloInstance, simply modifying previous model now state-dependent speciation rates. Every time call setLambdaXYZ (XYZ specific type model), resetting instance use model set parameters—previous speciation-rate model discarded. aspects model remain , model currently assumes extinction rates sampling fractions character states. can specify state-dependent extinction rates sampling probabilities likewise:","code":"# specify the state-dependent speciation rates lambdas <- c(0.5, 1.0)  # set the parameters tp$setLambdaStateDependent(lambdas)  # compute the likelihood tp$computeLogLikelihood() ## [1] -54.54666 # specify the state-dependent extinction rates mus <- c(0.05, 0.1) tp$setMuStateDependent(mus)  # specify the state-dependent sampling probabilities rhos <- c(0.3, 0.7) tp$setRhoPresentStateDependent(rhos)  # compute the likelihood tp$computeLogLikelihood() ## [1] -54.01101"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"time-dependent-models","dir":"Articles","previous_headings":"Specifying models and parameters","what":"Time-dependent models","title":"Using tensoRphylo","text":"can also let rates vary time according discrete rate function. Say want assume speciation rate among character states, changes particular time point, \\(t\\). can specify model like : case, time indicates long ago change occurred, measured present (\\(t = 0\\)). can number rate-change times, must ordered increasing age. needs one rate rate change time; first rate rate present first rate-change time, second rate rate first rate-change time next, etc. last interval open right (past). example, model three rates: multiple parameters time-dependent, need share rate change times. example, model speciation transition rates change different times: Transition rates can vary among states time, like :","code":"# specify the rate-change time and the rates # NOTE: this undoes the state-dependent model we previously specified! lambda_change_times <- c(1) lambdas <- c(0.1, 0.5)  # set the parameters tp$setLambdaTimeDependent(lambda_change_times, lambdas)  # compute the likelihood tp$computeLogLikelihood() ## [1] -50.9456 # specify the rate-change time and the rates lambda_change_times <- c(1, 4) lambdas <- c(0.1, 0.5, 0.3)  # set the parameters tp$setLambdaTimeDependent(lambda_change_times, lambdas)  # compute the likelihood tp$computeLogLikelihood() ## [1] -52.21987 # specify the speciation rates lambda_change_times <- c(1, 4) lambdas <- c(0.1, 0.5, 0.3)  # specify the transition rates eta_change_times <- 5 etas <- c(0.1, 0.2)  # set the parameters tp$setLambdaTimeDependent(lambda_change_times, lambdas) tp$setEtaTimeDependentEqual(eta_change_times, etas)  # compute the likelihood tp$computeLogLikelihood() ## [1] -51.59954 # specify the transition-rate-change times eta_change_times <- 5  # specify transition rates in the first interval H_1 <- makeRateMatrix(num_states = 2) H_1[1,2] <- 0.1 H_1[2,1] <- 0.2  # specify transition rates in the second interval H_2 <- makeRateMatrix(num_states = 2) H_2[1,2] <- 0.2 H_2[2,1] <- 0.1  # make the vector of rate matrices Hs <- c(H_1, H_2)  # specify the transition rates tp$setEtaTimeDependentUnequal(eta_change_times, Hs)  # compute the likelihood tp$computeLogLikelihood() ## [1] -52.02416"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"time-and-state-dependent-models","dir":"Articles","previous_headings":"Specifying models and parameters","what":"Time-and-state-dependent models","title":"Using tensoRphylo","text":"’s possible specify time--state-dependent models tensoRphylo, , models diversification rates vary among states, relationship diversification rates states varies time. requires specify matrix diversification rates, columns correspond rates per state, rows correspond time intervals.","code":"# specify the speciation rates lambda_change_times <- c(1, 4) lambdas <- matrix(0, nrow = 3, ncol = 2) # three time intervals, two states lambdas[1,] <- c(0.1, 0.2) # speciation rates in the first interval lambdas[2,] <- c(0.2, 0.1) # speciation rates in the second interval lambdas[3,] <- c(0.4, 0.6) # speciation rates in the third interval  # set the parameters tp$setLambdaTimeStateDependent(lambda_change_times, lambdas)  # compute the likelihood tp$computeLogLikelihood() ## [1] -52.31829"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"cladogenetic-models","dir":"Articles","previous_headings":"Specifying models and parameters","what":"Cladogenetic models","title":"Using tensoRphylo","text":"tensoRphylo implements models states may change speciation events, one descendant lineages can different state ancestor, .e., state changes cladogenetic. common feature biogeographic chromosomal models. specify models three-dimensional array (loosely, “tensor”), \\(\\Omega\\). first dimension state ancestor, second dimensions state one descendant, third dimension state descendant. value ijkth element probability lineage state leaves one descendant state j state k, given speciation event. begin making empty tensoRphylo::CladoEvents object, filling events non-zero probability. Note array already includes two events, correspond descendants state ancestor; given ancestral state, possible combinations descendant states must sum 1. Therefore, initially populate array iii event probability 1; whenever set value event ith ancestral state, value subtracted iii event. Note , specified three events, ’ve actually added four events array. require array symmetrical given ancestral state: set ijk one value, also need specify ikj value distinguish right left descendants. Therefore, set W[1,1,2] <- 0.2 actually setting W[1,1,2] <- 0.1 W[1,2,1] <- 0.1: provided probability divided half two indistinguishable alternatives. ’ve created cladogenetic array, provide TensorPhyloInstance like : can also set time-dependent cladogenetic arrays.","code":"# make an empty cladogenetic array.  W <- makeCladogeneticEvents(num_states = 2)  # print the empty array W ## A sparse cladogenetic event array with 2 events. <0x600003b573c0> ##     (ancestral state -> one descendant state, other descendant state) = value ##     (1 -> 1, 1) = 1.000 ##     (2 -> 2, 2) = 1.000 # specify a few cladogenetic events W[1,1,2] <- 0.2 W[2,2,1] <- 0.3  # print the populated array W ## A sparse cladogenetic event array with 6 events. <0x600003b573c0> ##     (ancestral state -> one descendant state, other descendant state) = value ##     (1 -> 1, 1) = 0.800 ##     (1 -> 1, 2) = 0.100 ##     (1 -> 2, 1) = 0.100 ##     (2 -> 1, 2) = 0.150 ##     (2 -> 2, 1) = 0.150 ##     (2 -> 2, 2) = 0.700 # set the cladogenetic array tp$setOmegaConstant(W)  # compute the likelihood tp$computeLogLikelihood() ## [1] -52.39677 # specify the cladogenetic-array-change times omega_change_times <- 3  # specify cladogenetic events in the first interval W_1 <- makeCladogeneticEvents(num_states = 2) W_1[1,1,2] <- 0.2 W_1[2,2,1] <- 0.3  # specify cladogenetic events in the second interval W_2 <- makeCladogeneticEvents(num_states = 2) W_2[1,1,2] <- 0.5 W_2[2,2,1] <- 0.1  # make the vector of rate matrices Ws <- c(W_1, W_2)  # specify the transition rates tp$setOmegaTimeDependent(omega_change_times, Ws)  # compute the likelihood tp$computeLogLikelihood() ## [1] -52.00237"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"models-with-mass-events","dir":"Articles","previous_headings":"Specifying models and parameters","what":"Models with mass events","title":"Using tensoRphylo","text":"general modeling framework implemented TensorPhylo includes “mass” equivalent every type diversification event. mass events occur given time affect lineage alive time. fact, ’ve already used mass event: sampling present, represented \\(\\rho\\) birth-death model. mass events can state-independent (lineage experiences event magnitude regardless state), state-dependent (lineage experiences different magnitude depends state).","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"mass-sampling-events","dir":"Articles","previous_headings":"Specifying models and parameters > Models with mass events","what":"Mass-sampling events","title":"Using tensoRphylo","text":"’ve seen previously, set mass-sampling present like : can also specify state-dependent sampling present: Sampling present special case mass-sampling event. can specify model slightly different way manually specifying time sampling event present: Notice specifying sampling fractions, rhos, matrix: interface allows arbitrary number mass-sampling events different times. rows matrix therefore correspond sampling fractions state, columns correspond different sampling times. example, can include additional sampling event time \\(t = 4\\) like :","code":"# specify the state-independent sampling probabilities at the present tp$setRhoPresent(0.5)  # compute the likelihood tp$computeLogLikelihood() ## [1] -54.61207 # specify the state-dependent sampling probabilities at the present rhos <- c(0.3, 0.7)  # set the sampling fraction tp$setRhoPresentStateDependent(rhos)  # compute the likelihood tp$computeLogLikelihood() ## [1] -52.00237 # specify the state-dependent sampling probabilities at the present sampling_times <- 0 rhos <- matrix(NA, nrow = 1, ncol = 2)  rhos[1,] <- c(0.3, 0.7) # sampling fraction at t = 0  # set the sampling fraction tp$setRhoStateDependent(sampling_times, rhos)  # compute the likelihood tp$computeLogLikelihood() ## [1] -52.00237 # specify the state-dependent sampling probabilities sampling_times <- c(0, 4) rhos <- matrix(NA, nrow = 2, ncol = 2)  rhos[1,] <- c(0.3, 0.7) # sampling fraction at t = 0 rhos[2,] <- c(0.1, 0.3) # sampling fraction at t = 4  # set the sampling fraction tp$setRhoStateDependent(sampling_times, rhos)  # compute the likelihood tp$computeLogLikelihood() ## [1] -54.29685"},{"path":"https://mikeryanmay.github.io/tensoRphylo/articles/tensoRphylo.html","id":"mass-extinction-events","dir":"Articles","previous_headings":"Specifying models and parameters > Models with mass events","what":"Mass-extinction events","title":"Using tensoRphylo","text":"Another type mass-event involves lineage given time going extinct probability, may may depend state. can specify mass-extinction events similarly specified mass-sampling events. state-independent mass-extinction event time \\(t = 3\\) lineage dies probability \\(p = 0.4\\). , state-dependent mass-extinction events specified matrix rows correspond events, columns correspond state-dependent extinction probabilities:","code":"# specify the state-independent extinction probabilities mass_extinction_times <- 3 mass_extinction_magnitude <- 0.4  # set the mass-extinction events tp$setGammaConstant(mass_extinction_times, mass_extinction_magnitude)  # compute the likelihood tp$computeLogLikelihood() ## [1] -56.14386 # specify the state-dependent extinction probabilities mass_extinction_times <- 3 gammas <- matrix(NA, nrow = 1, ncol = 2)  gammas[1,] <- c(0.2, 0.8) # extinction probabilities  # set the sampling fraction tp$setGammaStateDependent(mass_extinction_times, gammas)  # compute the likelihood tp$computeLogLikelihood() ## [1] -58.02865"},{"path":[]},{"path":[]},{"path":"https://mikeryanmay.github.io/tensoRphylo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael R. May. Maintainer.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"May MR (2022). tensoRphylo: R Interface TensorPhylo Library. R package version 0.1, https://mikeryanmay.github.io/tensoRphylo/.","code":"@Manual{,   title = {tensoRphylo: An R Interface for the TensorPhylo Library},   author = {Michael R. May},   year = {2022},   note = {R package version 0.1},   url = {https://mikeryanmay.github.io/tensoRphylo/}, }"},{"path":"https://mikeryanmay.github.io/tensoRphylo/index.html","id":"tensorphylo","dir":"","previous_headings":"","what":"An R Interface for the TensorPhylo Library","title":"An R Interface for the TensorPhylo Library","text":"tensoRphylo R interface C++ library TensorPhylo, high-performance library general class state-dependent sampled-birth-death phylogenetic models. general class models includes effectively state-dependent (state-independent) sampled-birth-death models currently available phylogenetics phylogenetic epidemiology.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Interface for the TensorPhylo Library","text":"install tensoRphylo, use devtools::install_github:","code":"devtools::install_github(\"https://github.com/mikeryanmay/tensoRphylo\")"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":null,"dir":"Reference","previous_headings":"","what":"Instance — TensorPhyloInstance","title":"Instance — TensorPhyloInstance","text":"tensorphylo interface.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Instance — TensorPhyloInstance","text":"","code":"makeTensorPhylo(tree, data = NULL, num_states = NULL)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Instance — TensorPhyloInstance","text":"general interface working tensorphylo high-performance library state-dependent birth-death models.","code":""},{"path":[]},{"path":[]},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"speciation-rates","dir":"Reference","previous_headings":"","what":"Speciation rates","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"extinction-rates","dir":"Reference","previous_headings":"","what":"Extinction rates","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"sampling-rates","dir":"Reference","previous_headings":"","what":"Sampling rates","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"destructive-sampling-rates","dir":"Reference","previous_headings":"","what":"Destructive-sampling rates","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"mass-speciation-events","dir":"Reference","previous_headings":"","what":"Mass-speciation events","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"mass-extinction-events","dir":"Reference","previous_headings":"","what":"Mass-extinction events","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"mass-sampling-events","dir":"Reference","previous_headings":"","what":"Mass-sampling events","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"mass-destructive-sampling-events","dir":"Reference","previous_headings":"","what":"Mass-destructive-sampling events","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"anagenetic-state-change-events","dir":"Reference","previous_headings":"","what":"Anagenetic state-change events","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"cladogenetic-state-change-events","dir":"Reference","previous_headings":"","what":"Cladogenetic state-change events","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/TensorPhyloInstance.html","id":"mass-anagenetic-state-change-events","dir":"Reference","previous_headings":"","what":"Mass-anagenetic-state-change events","title":"Instance — TensorPhyloInstance","text":"NA","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/approximatorVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximation algorithms — approximatorVersion","title":"Approximation algorithms — approximatorVersion","text":"list approximators tensorphylo","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/approximatorVersion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximation algorithms — approximatorVersion","text":"variables specify type approximator use. five options:","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/approximatorVersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximation algorithms — approximatorVersion","text":"","code":"# create an empty TensorPhyloInstance object tp <- new(TensorPhyloInstance, 4)  # specify a debug setting tp$setLikelihoodApproximator( approximatorVersion$AUTO_TUNING )  # this is equivalent to: tp$setLikelihoodApproximator( 0 )"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/conditionalProbability.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional probabilities — conditionalProbability","title":"Conditional probabilities — conditionalProbability","text":"list conditional probability options tensorphylo","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/conditionalProbability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional probabilities — conditionalProbability","text":"variables specify type conditional probability calculations. nine options:","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/conditionalProbability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional probabilities — conditionalProbability","text":"","code":"# create an empty TensorPhyloInstance object tp <- new(TensorPhyloInstance, 4)  # condition on survival of the root lineages tp$setConditionalProbabilityType( conditionalProbability$ROOT_SURVIVAL )  # this is equivalent to: tp$setConditionalProbabilityType( 1 )"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/debugMode.html","id":null,"dir":"Reference","previous_headings":"","what":"TensorPhyloInstance debug modes — debugMode","title":"TensorPhyloInstance debug modes — debugMode","text":"list debug modes tensorphylo","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/debugMode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TensorPhyloInstance debug modes — debugMode","text":"variables specify debug modes three options:","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/debugMode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TensorPhyloInstance debug modes — debugMode","text":"","code":"# create an empty TensorPhyloInstance object tp <- new(TensorPhyloInstance, 4)  # specify a debug setting tp$setDebugMode( debugMode$DBG_PRINT )  # this is equivalent to: tp$setDebugMode( 0 )"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/integrationScheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Integration algorithms — integrationScheme","title":"Integration algorithms — integrationScheme","text":"list numerical integration schemes tensorphylo","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/integrationScheme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integration algorithms — integrationScheme","text":"variables specify type numerical integration algorithm use. four options:","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/integrationScheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integration algorithms — integrationScheme","text":"","code":"# create an empty TensorPhyloInstance object tp <- new(TensorPhyloInstance, 4)  # specify a debug setting tp$setIntegrationScheme( integrationScheme$RUNGE_KUTTA_DOPRI5 )  # this is equivalent to: tp$setIntegrationScheme( 3 )"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeCladogeneticEvents.html","id":null,"dir":"Reference","previous_headings":"","what":"Cladogenetic Event array — makeCladogeneticEvents","title":"Cladogenetic Event array — makeCladogeneticEvents","text":"CladoEvents class.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeCladogeneticEvents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cladogenetic Event array — makeCladogeneticEvents","text":"","code":"makeCladogeneticEvents(num_states)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeCladogeneticEvents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cladogenetic Event array — makeCladogeneticEvents","text":"class sparse arrays cladogenetic events. ,j,k'th element contains probability ancestral lineage state leaves one descendant state j descendant state k speciation event. Objects class need subset possible events specified; unspecified events assumed occur probability 0. elements array represent probabilities, sum probabilities given ancestral state must 1. class enforces values 0 1, ancestral probabilities sum 1. models time-heterogeneous cladogenetic events, use generic c create vector event array (class CladoEventsList):","code":"O_1 <- makeCladogeneticEvents(3) O_2 <- makeCladogeneticEvents(3) Os  <- c(O_1, O_2)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeCladogeneticEvents.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Cladogenetic Event array — makeCladogeneticEvents","text":"Create new object class CladoEvents. makeCladogeneticEvents(dim) dim integer. Creates empty array. new(CladoEvents, dim). Equivalent makeCladogeneticEvents(dim).","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeCladogeneticEvents.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"Cladogenetic Event array — makeCladogeneticEvents","text":"CladoEvents provides intuitive access elements array, enforces behavior. [,j,k] returns value corresponding ancestor state leaving one descendant state_j_ states k. [,j,k] <- y sets value _ijk_th element y. result error attempt set non-event (= j = k), attempt set element value outside 0,1 bounds.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeCladogeneticEvents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cladogenetic Event array — makeCladogeneticEvents","text":"","code":"# create a cladogenetic event array. W <- makeCladogeneticEvents(3)  # set the probability of the ancestor in state 1 leaving left daughter in state 1 and right daughter in state 2 W[1,1,2] <- 0.2  if (FALSE) { # setting a diagonal value is prohibited W[1,1,1] <- 0.1  # likewise, setting a value outside of [0,1] is prohibited. W[1,1,2] <- -0.1 W[1,1,2] <-  1.1 }  # construct a time-homogeneous cladogenetic model W  <- makeCladogeneticEvents(4) tp <- new(TensorPhyloInstance, 4) tp$setOmegaConstant(W)  # construct a time-heterogeneous cladogenetic model W_1 <- makeCladogeneticEvents(4) W_2 <- makeCladogeneticEvents(4) Ws  <- c(W_1, W_2) t   <- 0.1 tp$setOmegaTimeDependent(t, Ws)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeProbabilityMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Matrix — makeProbabilityMatrix","title":"Probability Matrix — makeProbabilityMatrix","text":"ProbabilityMatrix class.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeProbabilityMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Matrix — makeProbabilityMatrix","text":"","code":"makeProbabilityMatrix(num_states = NULL, matrix = NULL)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeProbabilityMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Probability Matrix — makeProbabilityMatrix","text":"class transition-probability matrices, describe probability changing state (rows) state j (columns). matrices useful \"synchronous\" state-change events (lineages change simultaneously) time t. Objects class ProbabilityMatrix elements range 0 1 sum row one. Attempting set value diagonal element prohibited, computed automatically -diagonal elements. Likewise, class enforces element values x must 0 <= x <= 1. models time-heterogeneous rate matrices, use generic ProbabilityMatrix create vector rate matrices (class ProbabilityMatrixList):","code":"P_1 <- makeProbabilityMatrix(3) P_2 <- makeProbabilityMatrix(3) Ps  <- c(P_1, P_2)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeProbabilityMatrix.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Probability Matrix — makeProbabilityMatrix","text":"Create new object class ProbabilityMatrix. makeProbabilityMatrix(num_states) num_states integer. Creates num_states x num_states probability matrix 1s along diagonal. makeProbabilityMatrix(matrix = P) P base::matrix. Creates probability matrix values P.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeProbabilityMatrix.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Probability Matrix — makeProbabilityMatrix","text":"Call method makeProbabilityMatrix object P P$methodName(arguments). getMatrix(): Returns standard R base::matrix.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeProbabilityMatrix.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"Probability Matrix — makeProbabilityMatrix","text":"ProbabilityMatrix provides intuitive access elements rate matrix, enforces behavior. [,j] returns value _i_th row _j_th column. [,j] <- y sets value _ij_th element y. result error attempt set diagonal value, attempt set -diagonal element 0.0 1.0.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeProbabilityMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability Matrix — makeProbabilityMatrix","text":"","code":"# create a 4x4 probability matrix P <- makeProbabilityMatrix(4)  # set the rate from 1 to 2 to 0.2 P[1,2] <- 0.2  if (FALSE) { # setting a diagonal value is prohibited P[1,1] <- 0.1  # likewise, setting a value outside of [0,1] is prohibited. P[1,2] <- -0.1 P[1,2] <- 1.1 }  # construct a state-change model with one event at time t # (we have to use a vector of P because there may be more than one # time point, i.e., length(t) > 1). P  <- makeProbabilityMatrix(4) P[1,2] <- 0.1 t <- 0.1 tp <- new(TensorPhyloInstance, 4) tp$setZeta(t, c(P))"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeRateMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate Matrix — makeRateMatrix","title":"Rate Matrix — makeRateMatrix","text":"RateMatrix class.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeRateMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate Matrix — makeRateMatrix","text":"","code":"makeRateMatrix(num_states = NULL, rate = 0, matrix = NULL)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeRateMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rate Matrix — makeRateMatrix","text":"class instantaneous rate matrices, describe rate change state (rows) state j (columns). tensorphylo, matrices used describe \"anagenetic\", \"asynchronous\" events, .e., changes state associated speciation events, occur independently among lineages. directly analogous Q matrix substitution model. Objects class RateMatrix -diagonal elements strictly positive diagonal elements sum row zero. Attempting set value diagonal element prohibited, computed automatically -diagonal elements. Likewise, class enforces -diagonal elements must >= 0. models time-heterogeneous rate matrices, use generic c create vector rate matrices (class RateMatrixList):","code":"Q_1 <- makeRateMatrix(3, 0.1) Q_2 <- makeRateMatrix(3, 0.2) Qs  <- c(Q_1, Q_2)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeRateMatrix.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Rate Matrix — makeRateMatrix","text":"Create new object class RateMatrix. makeRateMatrix(num_states) num_states integer. Creates num_states x num_states rate matrix rate zero. makeRateMatrix(num_states, rate) num_states integer rate numeric. Creates num_states x num_states rate matrix average rate rate. makeRateMatrix(matrix = Q) Q base::matrix. Creates rate matrix values Q.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeRateMatrix.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Rate Matrix — makeRateMatrix","text":"Call method RateMatrix object Q Q$methodName(arguments). getMatrix(): Returns standard R base::matrix.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeRateMatrix.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"Rate Matrix — makeRateMatrix","text":"RateMatrix provides intuitive access elements rate matrix, enforces behavior. [,j] returns value _i_th row _j_th column. [,j] <- y sets value _ij_th element y. result error attempt set diagonal value, attempt set -diagonal element negative value.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/makeRateMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rate Matrix — makeRateMatrix","text":"","code":"# create a 4x4 rate matrix with average rate of 0.1 (ie a Jukes-Cantor model with mu = 0.1). Q <- makeRateMatrix(4, 0.1)  # set the rate from 1 to 2 to 0.2 Q[1,2] <- 0.2  if (FALSE) { # setting a diagonal value is prohibited Q[1,1] <- 0.1  # likewise, setting an off-diagonal value to a negative number is prohibited Q[1,2] <- -0.1 }  # construct a time-homogeneous rate matrix model Q  <- makeRateMatrix(4, 0.1) tp <- new(TensorPhyloInstance, 4) tp$setEtaConstantUnequal( Q )  # construct a time-heterogeneous rate matrix model Q_1 <- makeRateMatrix(4, 0.1) Q_2 <- makeRateMatrix(4, 0.2) Qs  <- c(Q_1, Q_2) t   <- 1 tp  <- new(TensorPhyloInstance, 4) tp$setEtaTimeDependentUnequal(t, Qs)"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/readDelimitedData.html","id":null,"dir":"Reference","previous_headings":"","what":"Read character data in a delimited text — readDelimitedData","title":"Read character data in a delimited text — readDelimitedData","text":"Read character data delimited text","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/readDelimitedData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read character data in a delimited text — readDelimitedData","text":"file path delimited text file (see details format). delim delimiter, either \",\", \"\\t\". nstates number states.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/readDelimitedData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read character data in a delimited text — readDelimitedData","text":"matrix formatted input tensorphylo. Named rows correspond species, columns correspond character states. value 1 indicates state consistent observed data.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/readDelimitedData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read character data in a delimited text — readDelimitedData","text":"Read data delimited text file. Useful cases nexus accommodate dataset (e.g., discrete characters lots states, like chromosome numbers). file may comma- tab-delimited, first column corresponding species name, second column corresponding character state(s). States encoded numbers 0 nstates - 1 (.e., first state 0). Ambiguous data can encoded listing consistent states, separated /. example, 2/3/7 indicates species possibly state 2, 3 7. Question marks, ?, dashes ,-, indicate missing data.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/readDelimitedData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read character data in a delimited text — readDelimitedData","text":"","code":"# path to character data file data_file <- system.file(\"testdata\", \"sampled_ancestor_data.csv\",                          package = \"tensoRphylo\")  # read the character data data <- readDelimitedData(data_file, delim = \",\", nstates = 2)  data #>      0 1 #> t_70 1 1 #> t_71 0 1 #> t_17 0 1 #> t_72 0 1 #> t_73 0 1 #> t_16 0 1 #> t_8  0 1 #> t_66 0 1 #> t_78 1 0 #> t_14 0 1 #> t_57 0 1 #> t_62 1 0 #> t_51 0 1 #> t_84 0 1 #> t_58 0 1 #> t_53 0 1 #> t_82 0 1 #> t_81 0 1 #> t_80 0 1"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/readNexusData.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Nexus formatted data — readNexusData","title":"Read Nexus formatted data — readNexusData","text":"Read data Nexus file format tensorphylo. principle, works nexus datatype symbols (done extensive testing), handles ambiguity/missing data.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/readNexusData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Nexus formatted data — readNexusData","text":"file path nexus file one DATA block, contains single discrete character.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/readNexusData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Nexus formatted data — readNexusData","text":"matrix formatted input tensorphylo. Named rows correspond species, columns correspond character states. value 1 indicates state consistent observed data.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/readNexusData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Nexus formatted data — readNexusData","text":"","code":"# path to character data file data_file <- system.file(\"testdata\", \"sampled_ancestor_data.nex\",                          package = \"tensoRphylo\")  # read the character data data <- readNexusData(data_file)  data #>      0 1 #> t_70 1 1 #> t_71 0 1 #> t_17 0 1 #> t_72 0 1 #> t_73 0 1 #> t_16 0 1 #> t_8  0 1 #> t_66 0 1 #> t_78 1 0 #> t_14 0 1 #> t_57 0 1 #> t_62 1 0 #> t_51 0 1 #> t_84 0 1 #> t_58 0 1 #> t_53 0 1 #> t_82 0 1 #> t_81 0 1 #> t_80 0 1"},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/tensoRphylo.html","id":null,"dir":"Reference","previous_headings":"","what":"tensoRphylo — tensoRphylo","title":"tensoRphylo — tensoRphylo","text":"R Interface TensorPhylo Library","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/tensoRphylo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tensoRphylo — tensoRphylo","text":"R interface tensorphylo, high-performance library probability calculations general class state-dependent birth-death models.","code":""},{"path":"https://mikeryanmay.github.io/tensoRphylo/reference/tensoRphylo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tensoRphylo — tensoRphylo","text":"Michael R May","code":""}]
